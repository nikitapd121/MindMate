<!DOCTYPE html>
<html lang="en" data-theme="dark">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Multi-Language Debugger | MindMate</title>
  <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@500;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #7e57c2;
      --primary-dark: #5e35b1;
      --accent: #4dd0e1;
      --text-light: #fefefe;
      --text-dark: #2c2c2c;
      --text-muted: #b0b8c1;
      --bg-light: #f4f6fa;
      --bg-dark: #0f1117;
      --card-light: #ffffff;
      --card-dark: #1a1d24;
    }

    [data-theme="dark"] {
      --bg: var(--bg-dark);
      --text: var(--text-light);
      --card-bg: var(--card-dark);
    }

    [data-theme="light"] {
      --bg: var(--bg-light);
      --text: var(--text-dark);
      --card-bg: var(--card-light);
    }

    body {
      font-family: 'Quicksand', sans-serif;
      background-color: var(--bg);
      color: var(--text);
      margin: 0;
      padding: 0;
    }

    .debug-container {
      max-width: 1000px;
      margin: 2rem auto;
      padding: 0 1rem;
    }

    h1 {
      color: var(--primary);
      margin-bottom: 1rem;
    }

    .debug-form {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    label {
      font-weight: 600;
    }

    textarea {
      width: 100%;
      min-height: 150px;
      padding: 1rem;
      border-radius: 8px;
      border: 1px solid var(--text-muted);
      background: var(--card-bg);
      color: var(--text);
      font-family: 'Courier New', monospace;
      resize: vertical;
      font-size: 14px;
    }

    select {
      padding: 0.8rem;
      border-radius: 8px;
      border: 1px solid var(--text-muted);
      background: var(--card-bg);
      color: var(--text);
      font-family: 'Quicksand', sans-serif;
    }

    .btn-submit {
      align-self: flex-end;
      padding: 0.8rem 1.5rem;
      background: var(--primary);
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 600;
      transition: background 0.2s;
    }

    .btn-submit:hover {
      background: var(--primary-dark);
    }

    .btn-submit:disabled {
      background: var(--text-muted);
      cursor: not-allowed;
    }

    .debug-result {
      margin-top: 2rem;
      padding: 1.5rem;
      background: var(--card-bg);
      border-radius: 8px;
      border-left: 4px solid var(--primary);
      display: none;
    }

    .debug-result h2 {
      color: var(--primary);
      margin-top: 0;
      margin-bottom: 1rem;
    }

    .issue {
      color: #ff6b6b;
      margin: 0.5rem 0;
      padding-left: 1.5rem;
      background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23ff6b6b"><path d="M12 2L1 21h22L12 2zm0 3.5L19.5 19h-15L12 5.5z"/><path d="M12 15c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1zm0-4c-.6 0-1-.4-1-1V8c0-.6.4-1 1-1s1 .4 1 1v2c0 .6-.4 1-1 1z"/></svg>') no-repeat left center;
    }

    .warning {
      color: #ffc107;
      margin: 0.5rem 0;
      padding-left: 1.5rem;
      background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23ffc107"><path d="M12 2L1 21h22L12 2zm0 3.5L19.5 19h-15L12 5.5z"/><path d="M12 15c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1zm0-4c-.6 0-1-.4-1-1V8c0-.6.4-1 1-1s1 .4 1 1v2c0 .6-.4 1-1 1z"/></svg>') no-repeat left center;
    }

    .suggestion {
      color: #4dd0e1;
      margin: 0.5rem 0;
      padding-left: 1.5rem;
      background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%234dd0e1"><path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm0 18c-4.4 0-8-3.6-8-8s3.6-8 8-8 8 3.6 8 8-3.6 8-8 8z"/><path d="M12 17c-.6 0-1-.4-1-1v-4c0-.6.4-1 1-1s1 .4 1 1v4c0 .6-.4 1-1 1zm0-8c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1z"/></svg>') no-repeat left center;
    }

    .gemini-output {
      margin-top: 1rem;
      padding: 1rem;
      border-left: 3px solid var(--accent);
      background-color: rgba(77, 208, 225, 0.05);
      white-space: pre-wrap;
      font-family: 'Courier New', monospace;
    }

    .error-message {
      color: #ff8787;
      margin-top: 1rem;
      padding: 0.5rem;
      background-color: rgba(255, 135, 135, 0.1);
      border-left: 3px solid #ff8787;
    }

    .language-tag {
      display: inline-block;
      padding: 0.2rem 0.5rem;
      background: var(--primary);
      color: white;
      border-radius: 4px;
      font-size: 0.8rem;
      margin-left: 0.5rem;
    }
  </style>
</head>
<body>
  <%- include('../partials/nav', { user: user }) %>

  <div class="debug-container">
    <h1>Multi-Language Code Debugger</h1>
    <p>Analyze code in any programming language for common issues and improvements.</p>

    <form class="debug-form">
      <div class="form-group">
        <label for="language">Programming Language:</label>
        <select id="language" name="language">
          <option value="">Auto-detect</option>
          <option value="javascript">JavaScript</option>
          <option value="python">Python</option>
          <option value="java">Java</option>
          <option value="cpp">C++</option>
          <option value="php">PHP</option>
          <option value="csharp">C#</option>
          <option value="go">Go</option>
          <option value="ruby">Ruby</option>
          <option value="swift">Swift</option>
        </select>
      </div>

      <div class="form-group">
        <label for="code">Your Code:</label>
        <textarea id="code" name="code" placeholder="Paste your code here..." spellcheck="false" required></textarea>
      </div>

      <div class="form-group">
        <label for="error">Error Message (optional):</label>
        <textarea id="error" name="error" placeholder="Paste any error messages you're seeing..." spellcheck="false"></textarea>
      </div>

      <button type="button" class="btn-submit">Analyze Code</button>
    </form>

    <div class="debug-result" id="debugResult">
      <h2>Analysis Results <span id="languageBadge" class="language-tag">JavaScript</span></h2>
      <div id="issuesContainer"></div>
      <div id="warningsContainer"></div>
      <div id="suggestionsContainer"></div>
      <div id="errorContainer"></div>
      <div id="geminiContainer" class="gemini-output"></div>
    </div>
  </div>

  <script>
    document.querySelector('.btn-submit').addEventListener('click', async () => {
      const code = document.getElementById('code').value.trim();
      const error = document.getElementById('error').value.trim();
      const language = document.getElementById('language').value;

      if (!code) {
        alert('Please enter some code to analyze');
        return;
      }

      try {
        const btn = document.querySelector('.btn-submit');
        btn.disabled = true;
        btn.textContent = 'Analyzing...';

        document.getElementById('debugResult').style.display = 'none';

        const response = await fetch('/member/debug-api', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ code, error, language })
        });

        if (!response.ok) throw new Error(`API Error: ${response.status}`);

        const result = await response.json();

        document.getElementById('languageBadge').textContent =
          result.language.charAt(0).toUpperCase() + result.language.slice(1);

        document.getElementById('issuesContainer').innerHTML =
          result.issues.length
            ? '<h3>Critical Issues</h3>' + result.issues.map(i => `<div class="issue">${i}</div>`).join('')
            : '<div class="suggestion">âœ… No critical issues found</div>';

        document.getElementById('warningsContainer').innerHTML =
          result.warnings.length
            ? '<h3>Warnings</h3>' + result.warnings.map(i => `<div class="warning">${i}</div>`).join('')
            : '';

        document.getElementById('suggestionsContainer').innerHTML =
          result.suggestions.length
            ? '<h3>Suggestions</h3>' + result.suggestions.map(i => `<div class="suggestion">${i}</div>`).join('')
            : '';

        document.getElementById('errorContainer').innerHTML =
          error ? `<div class="error-message">ðŸ”´ Original Error: <code>${error}</code></div>` : '';

        document.getElementById('geminiContainer').textContent = result.geminiOutput || '';

        document.getElementById('debugResult').style.display = 'block';

      } catch (err) {
        console.error('Debug failed:', err);
        alert('Analysis failed: ' + err.message);
      } finally {
        const btn = document.querySelector('.btn-submit');
        btn.disabled = false;
        btn.textContent = 'Analyze Code';
      }
    });

    document.getElementById('code').addEventListener('input', function() {
      if (!document.getElementById('language').value) {
        const firstLine = this.value.split('\n')[0].toLowerCase();
        let lang = 'javascript';
        if (firstLine.includes('python')) lang = 'python';
        else if (firstLine.includes('java')) lang = 'java';
        else if (firstLine.includes('c++')) lang = 'cpp';
        else if (firstLine.includes('<?php')) lang = 'php';
        else if (firstLine.includes('using ')) lang = 'csharp';
        else if (firstLine.includes('func ') || firstLine.includes('package ')) lang = 'go';
        else if (firstLine.includes('def ')) lang = 'ruby';
        else if (firstLine.includes('import ')) lang = 'swift';
        document.getElementById('languageBadge').textContent = lang.charAt(0).toUpperCase() + lang.slice(1);
      }
    });
  </script>
</body>
</html>
